<?php

function brainjogging_wordlist_form_alter(&$form, &$form_state, $form_id) {
   global $user;
   if( $form_id == "word_list_node_form" || $form_id == "word_list_category_node_form" || $form_id == "image_node_form" ){
    // Remove and alter fields
    $form['options']['#collapsible'] = FALSE;
    $form['name'] = array('#type' => 'value', '#value' => $user->name);
    $form['body_field']['body']['#required'] = TRUE;
    unset($form['author'],
          $form['options']['promote'],
          $form['options']['sticky'],
          $form['buttons']['preview'],
          $form['body_field']['format'],
          $form['revision_information']
         );
    }
   if( $form_id == "word_list_node_form"){
      // Add category filed
      $form['instruction'] = array(
      '#type' => 'textarea', 
      '#title' => t('WordList Instruction'), 
      '#default_value' => brainjogging_wordlist_get_instruction($form['nid']['#value']),
       '#weight' => 1,
      '#required' => TRUE
    );
      
      
    $form['category_id'] = array(
      '#type' => 'select', 
      '#title' => t('Category'), 
      '#default_value' => brainjogging_wordlist_get_wl_category($form['nid']['#value']),
      '#required' => TRUE,
      '#weight' => -3,
      '#options' => brainjogging_wordlist_get_wl_categories(),
      '#description' => t('select the category for this world list'),
    );
     $form['disability'] = array(
      '#type' => 'select', 
      '#title' => t('Disability'), 
      '#default_value' =>brainjogging_wordlist_node_get_disability($form['nid']['#value']),
      '#required' => TRUE,
      '#weight' => -4,
      '#multiple' => true, 
      '#options' => brainjogging_wordlist_get_disability(),
      '#description' => t('select the disability level for this world list'),
    );
     
     
      $form['age'] = array(
      '#type' => 'select', 
      '#title' => t('Age group'),
      '#weight' => 1,
      '#default_value' => brainjogging_wordlist_get_age($form['nid']['#value']),
      '#options' => array(
        '5-10' => t('5-10'), 
        '10-15' => t('10-15'), 
        '5-15' => t('5-15'),
        ),
        '#description' => t('Select the age group for the wordlist.'),
        
    );
     
      $form['wordlist_level'] = array(
      '#type' => 'checkbox', 
      '#title' => t('Is Global?'),
      '#required' => FASLE,
      '#weight' => 3,
      '#default_value' => isset($form['nid']['#value']) ?  brainjogging_wordlist_get_type($form['nid']['#value']) : 0,
    );
      $form['wordlist_type'] = array(
      '#type' => 'radios', 
      '#title' => t('WordList Type'),
      '#required' => TRUE,
      '#weight' => -2,
      '#default_value' => isset($form['nid']['#value']) ? brainjogging_wordlist_get_level($form['nid']['#value']) : 0, 
      '#options' => array(0=>t('Basic'), 1=>t('Phrases')),
    );
      $form['csv_upload'] = array(      
      '#type' => 'file',
      '#title' => t('Choose a file'),
      '#title_display' => 'invisible',
      '#size' => 22,
      '#weight' => 0,
      '#description' => t('Import words from excel or csv file.'),
    );
   $form['body_field']['body']['#required'] = FALSE;
   $form['#attributes'] = array('enctype' => 'multipart/form-data');
   $form['#submit'] = array('brainjogging_wordlist_form_submit');
   $form['#validate'] = array('brainjogging_wordlist_form_validate');
 
  }
  if( $form_id == "word_list_category_node_form"){   
    $form['options']=array('#type' => 'value', '#value' => $form['options']['status']['#default_value'] = 1);
  }
  
  if( $form_id == "image_node_form"){
    unset($form['attachments']);
    unset($form['image']['rebuild_images']);
    
    $form['options']=array('#type' => 'value', '#value' => $form['options']['status']['#default_value'] = 1);
  }  
}

function brainjogging_wordlist_form_validate($form, &$form_state){
   if(empty($_FILES['files']['name']['csv_upload']) && empty($form_state['values']['body'])){
    form_set_error('body', t('Please choose a file or enter the words'));
   }
}

function brainjogging_wordlist_form_submit($form, &$form_state){
   $words_array = array();
   if(!empty($_FILES['files']['name']['csv_upload'])){
      $info = pathinfo($_FILES['files']['name']['csv_upload']);
      if($info['extension'] == 'xls'){
         // Process the Excel file
         set_time_limit(0);
         require_once 'Excel/reader.php';
         $data = new Spreadsheet_Excel_Reader();
         $data->read($_FILES['files']['tmp_name']['csv_upload']);
         for ($i = 1; $i <= $data->sheets[0]['numRows']; $i++) {
          $words_array[] = trim($data->sheets[0]['cells'][$i][1]);  
         }
      }elseif($info['extension'] == 'csv'){
         // Process the CSV file
         if (($handle = fopen($_FILES['files']['tmp_name']['csv_upload'], "r")) !== FALSE) {
            while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
               $words_array[] = trim($data[0]);
            }
         }
      }
   }
   // Process the words
   if(!empty($words_array)){
      $values = $form_state['values'];
      $form_state['values']['body'] = implode(PHP_EOL, array_slice($words_array, 0, 25));
      $form_state['values']['title'] .= " - " . 1;
      $title_index = 2;
      for($i = 25; $i <= count($words_array)-1; $i += 25){
         $node = (object) $values;
         $node->body =  implode(PHP_EOL, array_slice($words_array, $i, 25));
         $node->title .= " - " . $title_index;
         $title_index++;
         node_save($node);
         drupal_set_message(sprintf("Wordlist %s has been created.",$node->title));
      }
   }
}

function brainjogging_wordlist_get_wl_categories(){
 $res = db_query("SELECT nid,title FROM {node} WHERE type = 'word_list_category' AND status = 1 ORDER BY title");
 while($obj = db_fetch_object($res)){
  $categories[$obj->nid] = $obj->title;
 }
 return $categories;
}

function brainjogging_wordlist_get_disability(){
 $res = db_query("SELECT did,name FROM {bj_learning_disability}");
 while($obj = db_fetch_object($res)){
  $disabities[$obj->did] = $obj->name;
 }
 return $disabities;
}
function brainjogging_wordlist_get_instruction($nid){
  if($nid){
    return db_result(db_query("SELECT instruction FROM {bj_wordlist_relativity} WHERE wl_id = %d",$nid));    
  }
}

function brainjogging_wordlist_node_get_disability($nid){
 
  if($nid){
  $res=db_query("SELECT d_id FROM {bj_wordlist_disability} WHERE wl_id = %d",$nid);
    while($obj = db_fetch_object($res)){
  $disabities[] = $obj->d_id;
 }
 return $disabities;
  }
}
function brainjogging_wordlist_get_age($nid){
  if($nid){
    return db_result(db_query("SELECT age FROM {bj_wordlist_relativity} WHERE wl_id = %d",$nid));    
  }
}

function brainjogging_wordlist_get_type($nid){
  if($nid){
    return db_result(db_query("SELECT type FROM {bj_wordlist_relativity} WHERE wl_id = %d",$nid));    
  }
}
function brainjogging_wordlist_get_level($nid){
  if($nid){
    return db_result(db_query("SELECT level FROM {bj_wordlist_relativity} WHERE wl_id = %d",$nid));    
  }
}

function brainjogging_wordlist_get_wl_category($nid){
  if($nid){
    return db_result(db_query("SELECT c_id FROM {bj_wordlist_relativity} WHERE wl_id = %d",$nid));    
  }
}

function brainjogging_wordlist_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {    
    case 'validate':
        if($node->type == 'word_list'){
          if(preg_match('/[^a-z0-9,.&\s]/i', $node->body)){
           form_set_error('body', t('special charactors are not alloweded.'));
          }
          if($node->wordlist_type == 0){
            $num_words  =str_word_count($node->body);
            if($num_words < 15 || $num_words > 25 ){
            form_set_error('body', t('Minimum 15 words required for basic wordlist.'));
            }
          }
          if($node->wordlist_type == 1){
            $textAr = explode("\n", trim($node->body));
            foreach ($textAr as $line) {
             $num_words  =str_word_count($line);
             if($num_words > 4 ){
              form_set_error('body', t('Minimum 4 words per line required for Phrases.'));
              break;
              }
            }
          }
        }
      break;
    
    case 'insert':
      if($node->type == 'word_list'){    
        db_query("INSERT INTO {bj_wordlist_relativity} (c_id,wl_id,type,level,age,instruction)
                 VALUES(%d, %d, %d, %d, '%s', '%s')",
                 $node->category_id,
                 $node->nid,
                 $node->wordlist_type,
                 $node->wordlist_level,                 
                 $node->age,
                 $node->instruction);
        brainjogging_wordlist_update_disability($node->nid, $node->disability);
        
      }
      break;
    
    case 'update':
      if($node->type == 'word_list'){
      db_query("UPDATE {bj_wordlist_relativity} SET c_id = %d, type = %d, level = %d, age = '%s',
               instruction = '%s' WHERE  wl_id = %d",
               $node->category_id,
               $node->wordlist_type,
               $node->wordlist_level,
               $node->age,
               $node->instruction,
               $node->nid);
        brainjogging_wordlist_update_disability($node->nid, $node->disability);
      }
      break;
    
    case 'load':
      if($node->type == 'word_list'){
        $node->category_id = brainjogging_wordlist_get_wl_category($node->nid);
      }
      break;
    
    case 'delete';
      // Delete all word list under the category
      if($node->type == 'word_list_category'){
        $res = db_query("SELECT wl_id FROM {bj_wordlist_relativity} WHERE c_id = %d", $node->nid);
        while($obj = db_fetch_object($res)){
          node_delete($obj->wl_id);
        }
      }elseif($node->type == 'word_list'){
        db_query("DELETE FROM {bj_wordlist_relativity} WHERE wl_id = %d", $node->nid);
        db_query("DELETE FROM {bj_wordlist_disability} WHERE wl_id = %d", $node->nid);
      }
      break;
  }  
}

function brainjogging_wordlist_update_disability($wid,array $disability){
  db_query("DELETE FROM {bj_wordlist_disability} WHERE wl_id = %d", $wid);
  foreach($disability as $dis){
    $str.= sprintf("(%d,%d),", $wid, $dis);
  }
  db_query("INSERT INTO {bj_wordlist_disability} values %s", substr($str,0,-1));
}